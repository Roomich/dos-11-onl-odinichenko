---------------------------HW9----------------------------------

1. Создать скрипт, который делает бэкап (архив) папки и перемещает ее в заданную папку с бэкапами, также скрипт должен проверять, сколько в папке бэкапов уже имеется и, если превышает порог, удалить самый старый. Параметры:
о Имя папки/файла которую бэкапить
о Папка, куда помещаться бэкап
о Порог количества бэкапов
2. Создать скрипт, который выведет время выполнения команды "find / -name test -type f"
3. Написать скрипт, который выведет:
о Точное количество выполняемых процессов в системе (доступных под текущим пользователем)
о Загрузка CPU в %
о Объем доступной оперативной памяти (в байтах или МБ)
о Количество установленных соединений по произвольному порту (например, 80, 22, 443) на вашем компьютере (т.е. «кто подключился к вам»). Порт задается параметром пуска. Если входной параметр отсутствует - вывести все порты
• Общий суммарный объем всех дисковых устройств, установленных в текущий
момент на компьютере (байты, КБ или Гб).
4. Написать скрипт, который генерирует дерево из директорий и файлов.
Каждая директория должна содержать минимум 1 файл. Количество файлов и папок внутри директорий рандомно. В каждой генерируемой папке должен быть мин один файл. Принимаемые параметры:
о Имя папки, в которой производить генерацию
о Глубина генерации (Пример: 1 == создается одна директория, 2 == 1 родительская директория и минимум 1 внутри нее)
Рандом <10
• Упрощенный вариант: количество вложенных файлов и папок = 1, должны соблюдаться глубина и имя папки, в которой производить генерацию

BashScripts/
Create_baskup.sh
Time_execute.sh
Minoring.sh
File_generator.sh

https://proghub.ru/t/bash-for-beginner - тест


---------------------------HW10----------------------------------

https://www.atlassian.com/continuous-delivery/continuous-integration

1.Найти и посчитать количество словосочетаний “continuous integration” 1-3 разными способами 
2.Заменить все “continuous integration” на абревиатуру  

---------------------------HW11----------------------------------

1.Вывести двухуровневый массив в виде матрицы, массив может быть создан сразу или введен пользователем, количество элементов строки или столбца > 3
2.С помощью скрипта на генерацию файлов/папок создать структуру (глубиной >= 3 и количетством файлов/папок > 4 - по желанию). Написать скрипт, который будет в каждый чётный файл записывать even, а нечетный - odd.
  -) Упрощенный вариант: сгенерировать в папке n файлов и внести в четный > even, нечетный > odd

---------------------------HW12----------------------------------

1) Вывести курсы валют по заданной пользователем валюте:
-доллар
-евро
-рос. рубль
-гривна
-польский злотый
Сайт можно использовать любой
Сделать через один запрос
Курс НБ РБ
Если создаётся файл wget-ом или curl-ом, то скрипт должен его удалить после выполнения.
Вариант реализации: curl отправляет запрос, ответ помещается в переменную, которая парсится на нужные валюты, через case/select идёт выбор валюты и выводится информация
2) (опционально) Отправить curl на любой сайт и получить данные авторизованного пользователя.
Креды не должны храниться в коде, если использкется файл - можно добавить в .gitignore.
Вариант реализации: вы заходите на страницу авторизации сайта, вводите некорректные данные и перед нажатием кнопки "login" нажимаете f12, вкладка Network, и нажимаете логин, появится запрос, наподобие "?mod=login", который можно скопировать как curl(bash). Далее заменяются логин/пароль на корректные, удаляются лишние заголовки (по желанию) и отправляется curl запрос. Ответ можно отпарсить через grep на данные, отличные от данных неавторизованного пользователя.